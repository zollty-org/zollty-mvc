<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://www.zollty.org/mvc/schema/beans"
    xmlns:mvcns="http://www.zollty.org/mvc/schema/beans"
    targetNamespace="http://www.zollty.org/mvc/schema/beans"
    elementFormDefault="qualified" version="1.3">

  <xsd:annotation>
    <xsd:documentation><![CDATA[
     XML Schema for Zollty MVC Framework, Version 1.3
	 Author: Zollty Tsou (zolltytsou@gmail.com, https://github.com/zollty)
	 This defines a simple and consistent way of creating a namespace of JavaBeans objects, 
	 (managed by a ZolltyMVC's BeanFactory), and some configurations for the framework.
     ]]></xsd:documentation>
  </xsd:annotation>

  <!-- Top-level(root) tag -->
  <xsd:element name="beans">
    <xsd:annotation>
      <xsd:documentation>
        <![CDATA[ The root element. ]]>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:choice minOccurs="0" maxOccurs="unbounded">
          <!-- 配置 -->
          <xsd:element ref="no-intercept" />
          <xsd:element ref="after-close" />
          <xsd:element ref="before-refresh" />
          <xsd:element ref="component-scan" />
          <!-- 基础 -->
          <xsd:element ref="bean" />
          <xsd:element ref="import" />
        </xsd:choice>
        <xsd:choice minOccurs="0" maxOccurs="1">
          <!-- 配置 -->
          <xsd:element ref="mvc" />
          <xsd:element ref="logger" />
          <xsd:element ref="error-page" />
        </xsd:choice>
      </xsd:sequence>
    </xsd:complexType>
    <xsd:unique name="uniqueID">
      <xsd:selector xpath="mvcns:bean"></xsd:selector>
      <xsd:field xpath="@id"></xsd:field>
    </xsd:unique>
  </xsd:element>

  <xsd:element name="mvc" type="mvcType">
  </xsd:element>
  <xsd:element name="component-scan" type="componentScanType">
  </xsd:element>
  <xsd:element name="logger" type="loggerType">
  </xsd:element>
  <xsd:element name="no-intercept" type="noInterceptType">
  </xsd:element>
  <xsd:element name="before-refresh" type="beforeRefreshType">
  </xsd:element>
  <xsd:element name="after-close" type="afterCloseType">
  </xsd:element>
  <xsd:element name="error-page" type="errorPageType">
  </xsd:element>
  <xsd:element name="import" type="importType">
  </xsd:element>

  <xsd:element name="bean">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:choice minOccurs="0" maxOccurs="unbounded">
          <xsd:element ref="property" />
        </xsd:choice>
        <xsd:choice minOccurs="0" maxOccurs="1">
          <xsd:element ref="constructor" />
        </xsd:choice>
      </xsd:sequence>
      <xsd:attribute name="id" type="xsd:string">
      </xsd:attribute>
      <xsd:attribute name="class" type="xsd:string" use="required">
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="property" type="propertyType">
  </xsd:element>

  <xsd:element name="constructor" type="constructorType">
  </xsd:element>

  <xsd:element name="value">
    <xsd:complexType mixed="true">
      <xsd:choice minOccurs="0" maxOccurs="unbounded" />
      <xsd:attribute name="type" type="xsd:string">
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="ref">
    <xsd:complexType>
      <xsd:attribute name="bean" type="xsd:string">
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="null">
    <xsd:complexType mixed="true">
      <xsd:choice minOccurs="0" maxOccurs="unbounded" />
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="array">
    <xsd:complexType>
      <xsd:group ref="collectionElements" />
      <xsd:attribute name="type" type="xsd:string">
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="list">
    <xsd:complexType>
      <xsd:group ref="collectionElements" />
      <xsd:attribute name="type" type="xsd:string">
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="set">
    <xsd:complexType>
      <xsd:group ref="collectionElements" />
      <xsd:attribute name="type" type="xsd:string">
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="map">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:choice minOccurs="0" maxOccurs="unbounded">
          <xsd:element ref="entry" />
        </xsd:choice>
      </xsd:sequence>
      <xsd:attribute name="type" type="xsd:string">
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="entry">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="key" minOccurs="0" maxOccurs="1">
          <xsd:complexType> <!-- mixed="true" -->
            <xsd:group ref="collectionElements" />
          </xsd:complexType>
        </xsd:element>
        <xsd:element name="value" minOccurs="0" maxOccurs="1">
          <xsd:complexType> <!-- mixed="true" -->
            <xsd:group ref="collectionElements" />
          </xsd:complexType>
        </xsd:element>
      </xsd:sequence>
      <xsd:attribute name="key" type="xsd:string">
      </xsd:attribute>
      <xsd:attribute name="value" type="xsd:string">
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <!-- Collection Elements -->
  <xsd:group name="collectionElements">
    <xsd:sequence>
      <xsd:choice minOccurs="0" maxOccurs="unbounded">
        <!-- <xsd:element ref="bean" /> -->
        <xsd:element ref="ref" />
        <xsd:element ref="value" />
        <xsd:element ref="null" />
        <xsd:element ref="array" />
        <xsd:element ref="list" />
        <xsd:element ref="set" />
        <xsd:element ref="map" />
      </xsd:choice>
    </xsd:sequence>
  </xsd:group>

  <xsd:complexType name="propertyType">
    <xsd:sequence>
      <xsd:choice minOccurs="0" maxOccurs="1">
        <!-- <xsd:element ref="bean" /> -->
        <xsd:element ref="value" />
        <xsd:element ref="ref" />
        <xsd:element ref="null" />
        <xsd:element ref="array" />
        <xsd:element ref="list" />
        <xsd:element ref="set" />
        <xsd:element ref="map" />
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:string" use="required">
    </xsd:attribute>
    <xsd:attribute name="ref" type="xsd:string">
    </xsd:attribute>
    <xsd:attribute name="value" type="xsd:string">
    </xsd:attribute>
  </xsd:complexType>

  <xsd:complexType name="constructorType">
    <xsd:sequence>
      <xsd:choice minOccurs="1" maxOccurs="unbounded">
        <!-- <xsd:element ref="bean" /> -->
        <xsd:element ref="value" />
        <xsd:element ref="ref" />
        <xsd:element ref="null" />
        <xsd:element ref="array" />
        <xsd:element ref="list" />
        <xsd:element ref="set" />
        <xsd:element ref="map" />
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <!-- Type definitions -->
  <xsd:complexType name="mvcType">
    <xsd:attribute name="view-path" type="xsd:string" use="required">
    </xsd:attribute>
    <xsd:attribute name="view-encoding" type="xsd:string" use="required">
    </xsd:attribute>
  </xsd:complexType>

  <xsd:complexType name="componentScanType">
    <xsd:attribute name="base-package" type="xsd:string" use="required">
    </xsd:attribute>
  </xsd:complexType>

  <xsd:complexType name="loggerType">
    <xsd:attribute name="class" type="xsd:string" use="required">
    </xsd:attribute>
    <xsd:attribute name="level" type="xsd:string">
    </xsd:attribute>
  </xsd:complexType>

  <xsd:complexType name="noInterceptType">
    <xsd:attribute name="prefix" type="xsd:string">
    </xsd:attribute>
    <xsd:attribute name="suffix" type="xsd:string">
    </xsd:attribute>
  </xsd:complexType>
  
  <xsd:complexType name="beforeRefreshType">
    <xsd:attribute name="class" type="xsd:string">
    </xsd:attribute>
  </xsd:complexType>
  
  <xsd:complexType name="afterCloseType">
    <xsd:attribute name="class" type="xsd:string">
    </xsd:attribute>
  </xsd:complexType>

  <xsd:complexType name="errorPageType">
    <xsd:attribute name="path" type="xsd:string" use="required">
    </xsd:attribute>
  </xsd:complexType>

  <xsd:complexType name="importType">
    <xsd:attribute name="resource" type="xsd:string" use="required">
    </xsd:attribute>
  </xsd:complexType>

</xsd:schema>